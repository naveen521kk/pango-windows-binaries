name: Build Pango

on:
  push:

jobs:
  build_bin:
    name: Build Pango Windows for Manim
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - msystem: MINGW64
            arch: x86_64
            pythonarch: x64
          - msystem: MINGW32
            arch: i686
            pythonarch: x86
    steps:
      - uses: msys2/setup-msys2@v2
        name: Setup Msys
        with:
          msystem: ${{ matrix.msystem }}
          install: mingw-w64-${{ matrix.arch }}-pango mingw-w64-${{ matrix.arch }}-toolchain tar mingw-w64-${{ matrix.arch }}-meson mingw-w64-${{ matrix.arch }}-gobject-introspection
      - uses: actions/checkout@v2
        with:
          repository: naveen521kk/manim
          ref: 'pango-text'
      - shell: msys2 {0}
        env:
          MSYSTEM: ${{ matrix.msystem }}
          MSYS2_ARCH: ${{ matrix.arch }}
        run: |
          curl -L https://ftp.gnome.org/pub/GNOME/sources/pango/1.47/pango-1.47.0.tar.xz -o pango.tar.xz
          tar xf pango.tar.xz          
          mv pango-* pango
          pacman --noconfirm -S --needed \
            base-devel \
            mingw-w64-$MSYS2_ARCH-gobject-introspection \
            mingw-w64-$MSYS2_ARCH-harfbuzz \
            mingw-w64-$MSYS2_ARCH-fontconfig \
            mingw-w64-$MSYS2_ARCH-fribidi \
            mingw-w64-$MSYS2_ARCH-libthai \
            mingw-w64-$MSYS2_ARCH-cairo \
            mingw-w64-$MSYS2_ARCH-meson \
            mingw-w64-$MSYS2_ARCH-toolchain \
            mingw-w64-$MSYS2_ARCH-cantarell-fonts
          meson --buildtype=release --default-library=static --prefix=$PWD\pangobuild pangobuilddir pango
          cd pangobuilddir
          ninja
          dir pango

      - uses: actions/upload-artifact@v2
        with:
         name: pango.${{ matrix.msystem }}
         path: pangobuild
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
         name: pango.${{ matrix.msystem }}.logs
         path: pangobuilddir
 
      - name: Set up Python
        if: ${{ matrix.msystem }} == MINGW64
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
          architecture: ${{ matrix.pythonarch }}


      - name: Get pip cache dir
        shell: bash
        id: pip-cache-and-time
        run: |
           echo "::set-output name=dir::$(pip cache dir)"
           echo "::set-output name=date::$(/bin/date -u "+%m%Y")"
      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache-and-time.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ matrix.python }}-${{ steps.pip-cache-and-time.outputs.date }}
      - name: Cache Windows
        id: cache-windows
        if: runner.os == 'Windows'
        uses: actions/cache@v2
        with:
         path: ${{ github.workspace }}\ManimCache
         key: ${{ runner.os }}-dependencies-ffmpeg-sox-tinytex-${{ hashFiles('.github/manimdependency.json') }}-${{ steps.pip-cache-and-time.outputs.date }}

      - name: Install Manim
        if: runner.os == 'Windows' && steps.cache-windows.outputs.cache-hit != 'true'
        run: |
          $soxVersion = python -c "import json;print(json.load(open('.github/manimdependency.json'))['windows']['sox'])"
          $soxVersionNumber = python -c "import json;print(json.load(open('.github/manimdependency.json'))['windows']['sox'].split('-')[1])"
          $ffmpegVersion = python -c "import json;print(json.load(open('.github/manimdependency.json'))['windows']['ffmpeg'])"
          $ffmpegVersionNumber = python -c "import json;print(json.load(open('.github/manimdependency.json'))['windows']['ffmpeg'].split('-')[1])"
          $OriPath = $env:PATH
          echo "Install Tinytex"
          Invoke-WebRequest "https://ci.appveyor.com/api/projects/yihui/tinytex/artifacts/TinyTeX.zip?job=image:%20Visual%20Studio%202019" -O "$($env:TMP)\TinyTex.zip"
          Expand-Archive -LiteralPath "$($env:TMP)\TinyTex.zip" -DestinationPath "$($PWD)\ManimCache\LatexWindows"
          $env:Path = "$($PWD)\ManimCache\LatexWindows\TinyTeX\bin\win32;$($env:PATH)"
          tlmgr install standalone preview doublestroke ms setspace rsfs relsize ragged2e fundus-calligra microtype wasysym physics dvisvgm jknapltx wasy cm-super babel-english
          $env:PATH=$OriPath
          echo "Completed Latex Install Sox"
          Invoke-WebRequest "https://downloads.sourceforge.net/project/sox/sox/$($soxVersionNumber)/$($soxVersion).zip" -UserAgent "wget" -O "$($env:TMP)\SoX.zip"
          7z x "$($env:TMP)\SoX.zip" -o"$($PWD)\ManimCache"
          Move-Item "ManimCache\sox-*" "ManimCache\SoX"
          choco install --no-progress ffmpeg
          $env:Path += ";" + "$($PWD)\ManimCache\LatexWindows\TinyTeX\bin\win32"
          $env:Path += ";" + "$($PWD)\ManimCache\SoX"
          dir pango
          $env:Path += ";" + "$($PWD)\pango"
          echo "::set-env name=Path::$env:Path"
      - name: Add Windows dependecies to path
        if: runner.os == 'Windows' 
        run: |
          choco install --no-progress ffmpeg
          7z a "pango.zip" "$($PWD)\pango"
          $env:Path += ";" + "$($PWD)\ManimCache\FFmpeg\bin"
          $env:Path += ";" + "$($PWD)\ManimCache\LatexWindows\TinyTeX\bin\win32"
          $env:Path += ";" + "$($PWD)\ManimCache\SoX"
          $env:Path += ";" + "$($PWD)\pango\bin"
          $env:PATH = "$env:GITHUB_WORKSPACE\pango;$env:PATH"
          echo "::set-env name=Path::$env:Path"
      - name: Install Poetry and Manim Python Dependency
        shell: cmd
        env:
          POETRY_VIRTUALENVS_CREATE: $false
        run: |
          where libcairo*
          where sox
          where latex
          pip install poetry
          poetry install
          poetry run pytest
          
      - name: Test Pango
        env:
          POETRY_VIRTUALENVS_CREATE: $false
        run: |
          Invoke-WebRequest https://raw.githubusercontent.com/naveen521kk/manim/pango-text/example_scenes/pangoText.py -O testpan.py
          manim testpan.py
      - uses: actions/upload-artifact@v2
        with:
         name: media.${{ matrix.msystem }}
         path: media
